# -*- python -*-

load(
    "@drake//tools/install:install.bzl",
    "install",
)
load(
    "@drake//tools/workspace:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "@drake//tools/workspace:generate_include_header.bzl",
    "drake_generate_include_header",
)

licenses(["notice"])  # LGPL

package(default_visibility = ["//visibility:public"])

# First we build filib from the .tgz and patch file in the ibex repository.

cmake_configure_file(
    name = "rounding_control_config",
    src = "filibsrc-3.0.2.2/rounding_control/rounding_control_config.hpp.in",
    out = "filibsrc-3.0.2.2/rounding_control/rounding_control_config.hpp",
    defines = ["define_have_sse=#define HAVE_SSE", "define_have_x87="],
    visibility = ["//visibility:private"],
)

# Note: We cannot glob the files since they are generated by the
# `extract_filib` rule.  Instead, we list them explicitly here.
FILIB_FILES = [
    "filibsrc-3.0.2.2/" + s
    for s in [
        "interval/stdfun/filib_consts.hpp",
        "interval/interval_fo.hpp",
        "interval/filib.hpp",
        "interval/interval.hpp",
        "ieee/primitive.hpp",
        "fp_traits/fp_traits_float.hpp",
        "fp_traits/fp_traits_x87_const.hpp",
        "fp_traits/fp_traits_double.hpp",
        "fp_traits/fp_traits_sse_const.hpp",
        "fp_traits/fp_traits.hpp",
        "rounding_control/rounding_control_config.hpp.in",
        "rounding_control/rounding_control_stub.hpp",
        "rounding_control/rounding_control_float.hpp",
        "rounding_control/rounding_control_double.hpp",
        "rounding_control/rounding_control.hpp",
        "interval/stdfun/interval/asin.icc",
        "interval/stdfun/interval/sqr.icc",
        "interval/stdfun/interval/pow.icc",
        "interval/stdfun/interval/tanh.icc",
        "interval/stdfun/interval/sqrt.icc",
        "interval/stdfun/interval/log10.icc",
        "interval/stdfun/interval/log.icc",
        "interval/stdfun/interval/exp2.icc",
        "interval/stdfun/interval/acosh.icc",
        "interval/stdfun/interval/acot.icc",
        "interval/stdfun/interval/coth.icc",
        "interval/stdfun/interval/expm1.icc",
        "interval/stdfun/interval/exp.icc",
        "interval/stdfun/interval/log1p.icc",
        "interval/stdfun/interval/tan.icc",
        "interval/stdfun/interval/atanh.icc",
        "interval/stdfun/interval/cot.icc",
        "interval/stdfun/interval/exp10.icc",
        "interval/stdfun/interval/log2.icc",
        "interval/stdfun/interval/asinh.icc",
        "interval/stdfun/interval/acoth.icc",
        "interval/stdfun/interval/sin.icc",
        "interval/stdfun/interval/acos.icc",
        "interval/stdfun/interval/cos.icc",
        "interval/stdfun/interval/sinh.icc",
        "interval/stdfun/interval/atan.icc",
        "interval/stdfun/interval/cosh.icc",
        "interval/stdfun/filib_tools.icc",
        "interval/stdfun/point/q_log.icc",
        "interval/stdfun/point/q_lg10.icc",
        "interval/stdfun/point/q_cot.icc",
        "interval/stdfun/point/q_tan.icc",
        "interval/stdfun/point/q_acot.icc",
        "interval/stdfun/point/q_exp.icc",
        "interval/stdfun/point/q_sqrt.icc",
        "interval/stdfun/point/q_expm.icc",
        "interval/stdfun/point/q_acos.icc",
        "interval/stdfun/point/q_sqr.icc",
        "interval/stdfun/point/q_atnh.icc",
        "interval/stdfun/point/q_atn1.icc",
        "interval/stdfun/point/q_rtrg.icc",
        "interval/stdfun/point/q_cth1.icc",
        "interval/stdfun/point/q_asin.icc",
        "interval/stdfun/point/q_errm.icc",
        "interval/stdfun/point/q_acth.icc",
        "interval/stdfun/point/q_sinh.icc",
        "interval/stdfun/point/q_cosh.icc",
        "interval/stdfun/point/q_sin.icc",
        "interval/stdfun/point/q_cos1.icc",
        "interval/stdfun/point/q_ep1.icc",
        "interval/stdfun/point/q_log2.icc",
        "interval/stdfun/point/q_ex10.icc",
        "interval/stdfun/point/q_cos.icc",
        "interval/stdfun/point/q_tanh.icc",
        "interval/stdfun/point/q_log1.icc",
        "interval/stdfun/point/q_asnh.icc",
        "interval/stdfun/point/q_sin1.icc",
        "interval/stdfun/point/q_atan.icc",
        "interval/stdfun/point/q_epm1.icc",
        "interval/stdfun/point/q_coth.icc",
        "interval/stdfun/point/q_acsh.icc",
        "interval/stdfun/point/q_exp2.icc",
        "interval/interval_arith.icc",
        "interval/interval.icc",
        "interval/tools.icc",
        "fp_traits/fp_traits_double_x87_multiplicative.icc",
        "fp_traits/fp_traits_float_sse_native_switched.icc",
        "fp_traits/fp_traits_double_sse_multiplicative.icc",
        "fp_traits/fp_traits_float_generic_multiplicative.icc",
        "fp_traits/fp_traits_float_sse_native_directed.icc",
        "fp_traits/fp_traits_float_sse_native_onesided_global.icc",
        "fp_traits/fp_traits_float_x87_multiplicative.icc",
        "fp_traits/fp_traits_double_sse_pred_succ_rounding.icc",
        "fp_traits/fp_traits_double_sse_native_onesided_global.icc",
        "fp_traits/fp_traits_double_generic_pred_succ_rounding.icc",
        "fp_traits/fp_traits_double_sse_native_switched.icc",
        "fp_traits/fp_traits_double_generic_native_switched.icc",
        "fp_traits/fp_traits_float_generic_native_onesided_global.icc",
        "fp_traits/fp_traits_double_sse_no_rounding.icc",
        "fp_traits/fp_traits_double_x87_pred_succ_rounding.icc",
        "fp_traits/fp_traits_float_x87_native_switched.icc",
        "fp_traits/fp_traits_double_sse_native_directed.icc",
        "fp_traits/fp_traits_float_x87_native_onesided_global.icc",
        "fp_traits/fp_traits_float_x87_no_rounding.icc",
        "fp_traits/fp_traits_double_generic_native_onesided_global.icc",
        "fp_traits/fp_traits_double_generic_native_directed.icc",
        "fp_traits/fp_traits_double_x87_native_directed.icc",
        "fp_traits/fp_traits_double_generic_no_rounding.icc",
        "fp_traits/fp_traits_float_x87_native_directed.icc",
        "fp_traits/fp_traits_base_double.icc",
        "fp_traits/fp_traits_double_x87_native_switched.icc",
        "fp_traits/fp_traits_float_sse_multiplicative.icc",
        "fp_traits/fp_traits_float_generic_native_switched.icc",
        "fp_traits/fp_traits_double_x87_native_onesided_global.icc",
        "fp_traits/fp_traits_float_generic_native_directed.icc",
        "fp_traits/fp_traits_base_float.icc",
        "fp_traits/fp_traits_float_sse_no_rounding.icc",
        "fp_traits/fp_traits_double_x87_no_rounding.icc",
        "fp_traits/fp_traits_double_generic_multiplicative.icc",
        "fp_traits/fp_traits_float_generic_no_rounding.icc",
        "rounding_control/rounding_control_float_iso9x.icc",
        "rounding_control/rounding_control_float_asmmsvci386.icc",
        "rounding_control/rounding_control_double_asmmsvci386.icc",
        "rounding_control/rounding_control_double_asmsparc.icc",
        "rounding_control/rounding_control_double_void.icc",
        "rounding_control/rounding_control_float_void.icc",
        "rounding_control/rounding_control_float_asmsparc.icc",
        "rounding_control/rounding_control_double_iso9x.icc",
        "interval/stdfun/filib_consts.cpp",
        "ieee/primitive.cpp",
        "fp_traits/fp_traits_base_float_setup.cpp",
        "fp_traits/fp_traits_sse_const.cpp",
        "fp_traits/fp_traits_float_setup.cpp",
        "fp_traits/fp_traits_double_setup.cpp",
        "fp_traits/fp_traits_x87_const.cpp",
        "fp_traits/fp_traits_base_double_setup.cpp",
    ]
]

FILIB_CONFIGURED_FILES = [
    s[:-3] if s[-3:] == ".in" else s
    for s in FILIB_FILES
]
FILIB_HEADER_FILES = [
    s
    for s in FILIB_CONFIGURED_FILES
    if s[-4:] == ".hpp" or s[-4:] == ".icc"
]
FILIB_SOURCE_FILES = [s for s in FILIB_CONFIGURED_FILES if ".cpp" in s]

genrule(
    name = "extract_filib",
    srcs = [
        "interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.tar.gz",
        "interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.all.all.patch",
    ],
    outs = FILIB_FILES,
    cmd = "tar -xzvf $(location interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.tar.gz) -C $(@D) && (patch -p1 -d $(@D) <$(location interval_lib_wrapper/filib/3rd/filibsrc-3.0.2.2.all.all.patch) || true)",  # noqa
)

cc_library(
    name = "filib",
    srcs = FILIB_SOURCE_FILES,
    hdrs = FILIB_HEADER_FILES,
    includes = ["filibsrc-3.0.2.2"],
    copts = ["-w -frounding-math -ffloat-store -DHAVE_BOOST"],
    linkstatic = True,
)

# Now we actually build IBEX.

# IBEX has the following dependencies in addition to those declared in deps:
#   Clp: EPL-1
#   CoinUtils: EPL-1
#   bzip2: bzip2-1.0.6

# First we define the variables that must get pushed into the .in files during
# the cmake configure step.

OPERATORS_INCLUDES = """
#include "ibex_atanhc.h"
#include "ibex_atanhccc.h"
#include "ibex_crossproduct.h"
#include "ibex_sinc.h"
#include "ibex_trace.h"
"""

OPERATORS_FCT_DEF = """
inline Interval atanhc(const Interval& x) {
  return UnaryOperator<ATANHC,Interval,Interval>::fwd(x);
}
inline Interval atanhccc(const Interval& x) {
  return UnaryOperator<ATANHCCC,Interval,Interval>::fwd(x);
}
inline IntervalVector cross(const IntervalVector& x1, const IntervalVector& x2)
{
  return BinaryOperator<CROSS_PRODUCT,IntervalVector,IntervalVector,
                        IntervalVector>::fwd(x1,x2);
}
inline Interval sinc(const Interval& x) {
  return UnaryOperator<SINC,Interval,Interval>::fwd(x);
}
inline IntervalVector trace(const IntervalMatrix& x) {
  return UnaryOperator<TRACE,IntervalMatrix,IntervalVector>::fwd(x);
}
"""

OPERATORS_MACRO_UNARY = """
ADD_UNARY_OPERATOR(ATANHC,Interval,Interval);
ADD_UNARY_OPERATOR(ATANHCCC,Interval,Interval);
ADD_UNARY_OPERATOR(SINC,Interval,Interval);
ADD_UNARY_OPERATOR(TRACE,IntervalMatrix,IntervalVector);
"""

OPERATORS_MACRO_BINARY = """
ADD_BINARY_OPERATOR(CROSS_PRODUCT,IntervalVector,IntervalVector,IntervalVector);
"""

IBEX_CONFIG = [
    "IBEX_VERSION=2.8.6",
    # The default INTERVAL_LIB (gaol) is GPL.  filib is lesser-GPL.
    "INTERVAL_LIB=filib",
    # TODO(russt): LP_LIB=clp
    "LP_LIB=clp",
    "OPERATORS_INCLUDES=" + OPERATORS_INCLUDES,
    "OPERATORS_FCT_DEF=" + OPERATORS_FCT_DEF,
    "OPERATORS_MACRO_UNARY=" + OPERATORS_MACRO_UNARY,
    "OPERATORS_MACRO_BINARY=" + OPERATORS_MACRO_BINARY,
]

# Loop through the .in files and run cmake_configure_file.
[
    cmake_configure_file(
        name = "gen_" + file,
        src = file + ".in",
        out = file,
        defines = IBEX_CONFIG,
        visibility = ["//visibility:private"],
    )
    for file in [
        "src/ibex_Setting.h",
        "src/symbolic/ibex_ExprOperators.h",
        "src/symbolic/ibex_ExprOperators.cpp",
    ]
]

IBEX_HEADERS = glob([
    "src/**/*.h",
    "plugins/optim/src/**/*.h",
], exclude = [
    "src/bin/*",
]) + [
    "src/ibex_Setting.h",
    "src/symbolic/ibex_ExprOperators.h",
    "interval_lib_wrapper/filib/ibex_IntervalLibWrapper.h",
    "interval_lib_wrapper/filib/ibex_IntervalLibWrapper.inl",
    "lp_lib_wrapper/clp/ibex_LPLibWrapper.h",
]

drake_generate_include_header(
    name = "gen_ibex_h",
    out = "src/ibex.h",
    hdrs = IBEX_HEADERS,
    strip_prefix = ["src/"],
)

# Note: We have committed the flex and yacc generated outputs to our fork of
# ibex to avoid the unnecessary dependency here.  If we need to revisit this
# decision, the genrules needed are:
# "/usr/bin/flex -Pibex -o $(@D)/lexer.lex.cc $(location src/parser/#lexer.l)"
# to generate "src/parser/lexer.lex.cc" and
# "/usr/bin/bison --report=all --name-prefix=ibex --file-prefix=parser -d
#   -o $(@D)/src/parser/parser.tab.cc $(location src/parser/parser.yc)"
# to generate ["src/parser/parser.tab.cc", "src/parser/parser.tab.hh"].
# To do this properly in bazel,
# "@dreal//third_party/com_github_google_kythe/tools/build_rules:lexyacc.bzl"
# is close to what we need to pull in flex and bison.

cc_library(
    name = "ibex",
    srcs = glob([
        "src/**/*.cpp",
        "src/parser/*.cc",
        "plugins/optim/src/**/*.cpp",
    ], exclude = [
        "src/bin/*",
    ]) + [
        # These files must be generated:
        "interval_lib_wrapper/filib/ibex_IntervalLibWrapper.cpp",
        "lp_lib_wrapper/clp/ibex_LPLibWrapper.cpp",
        "src/symbolic/ibex_ExprOperators.cpp",
    ],
    hdrs = IBEX_HEADERS + [
        "src/ibex.h",
        "src/parser/parser.tab.hh",
    ],
    includes = glob(
        ["src/*", "plugins/optim/src/*"],
        exclude = ["src/wscript", "src/*.*"],
        exclude_directories = 0,
    ) + [
        "src",
        "interval_lib_wrapper/filib",
        "lp_lib_wrapper/clp",
        "",  # For plugins
    ],
    copts = ["-w -std=c++11"],
    licenses = [
        "restricted",  # LGPL
    ],
    # The linkopts= here are transcribed from the contents of the *.pc file.
    linkopts = [
        "-lClp",
        "-lCoinUtils",
        "-lbz2",
        "-lm",
    ],
    # The deps= here are transcribed from the contents of the *.pc file.
    deps = [
        # TODO(russt): Flex? Bison?
        ":filib",
        "@blas",
        "@lapack",
        "@zlib",
    ],
    linkstatic = True,
)

install(
    name = "install",
    docs = ["LICENSE"],
)
